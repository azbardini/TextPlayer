package textplayer;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.Sequence;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import org.jfugue.midi.MidiFileManager;
import org.jfugue.pattern.Pattern;
import org.jfugue.player.ManagedPlayer;
import org.jfugue.player.Player;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author bardini
 */
public class UserInterface extends javax.swing.JFrame {

    private String rawText;
    private CurrentStatus currentStatus;
    private Interpreter interpreter;
    private Manager manager = new Manager();
    private Pattern pattern;

    private Sequence sequence;
    private ManagedPlayer managedPlayer = new ManagedPlayer();

    private Thread threadPlay;
    private Thread threadPause;

    JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

    /**
     * Creates new form Interface
     */
    public UserInterface() {
        initComponents();
        setUpInterface();
        // TODO code application logic here        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        buttonSave = new javax.swing.JButton();
        buttonLoad = new javax.swing.JButton();
        buttonPlay = new javax.swing.JButton();
        buttonPause = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        fixedLabelStatus = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        buttonMidi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Garuda", 0, 24)); // NOI18N
        labelTitle.setText("Text Player");

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setText("A2 B2De?fC!D\\nE");
        scrollPane.setViewportView(textArea);

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonLoad.setText("Load");
        buttonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });

        buttonPlay.setText(" Play  ");
        buttonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayActionPerformed(evt);
            }
        });

        buttonPause.setText("Pause");
        buttonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPauseActionPerformed(evt);
            }
        });

        buttonStop.setText("Stop");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        fixedLabelStatus.setFont(new java.awt.Font("Garuda", 0, 18)); // NOI18N
        fixedLabelStatus.setText("Current Status:");

        labelStatus.setFont(new java.awt.Font("Garuda", 0, 18)); // NOI18N
        labelStatus.setText("Stopped");

        buttonMidi.setText("Save MIDI Execution");
        buttonMidi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMidiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(buttonMidi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonLoad))
                            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(labelTitle))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(fixedLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelStatus)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(buttonPlay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStop)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonLoad)
                    .addComponent(buttonMidi))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fixedLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPause)
                    .addComponent(buttonPlay)
                    .addComponent(buttonStop))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed
        loadFile();
    }//GEN-LAST:event_buttonLoadActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        saveFile();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayActionPerformed
        if (manager.getExecutionStatus().equals("stopped") || managedPlayer.isFinished()) {
            System.out.println("Play Pressed");

            rawText = textArea.getText();
            System.out.println("Got text (" + rawText + ")");

            System.out.println("Assigning instances...");
            currentStatus = new CurrentStatus();
            interpreter = new Interpreter(rawText, currentStatus);
            manager = new Manager(interpreter.getRawText(), interpreter);

            System.out.println("Translating...");
            String playable = interpreter.translate();
            System.out.println("Translated to (" + playable + ")");

            System.out.println("Creating patterns and sequences...");
            pattern = new Pattern(playable);
            Player player = new Player();
            sequence = player.getSequence(pattern);
            managedPlayer = new ManagedPlayer();
            manager.playSong(managedPlayer, sequence);

        } else {
            System.out.println("Play (Resume) Pressed");
            manager.resumeSong(managedPlayer, sequence);
        }
        labelStatus.setText("Executing");
        buttonPlay.setVisible(false);
        buttonPause.setVisible(true);
        buttonStop.setVisible(true);
        buttonMidi.setVisible(true);
    }//GEN-LAST:event_buttonPlayActionPerformed

    private void buttonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPauseActionPerformed
        System.out.println("Pause Pressed");
        manager.pauseSong(managedPlayer, sequence);
        labelStatus.setText("Paused");
        buttonPause.setVisible(false);
        buttonStop.setVisible(true);
        buttonPlay.setVisible(true);
    }//GEN-LAST:event_buttonPauseActionPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        System.out.println("Stop Pressed");
        manager.stopSong(managedPlayer, sequence);
        labelStatus.setText("Stopped");
        buttonStop.setVisible(false);
        buttonPause.setVisible(false);
        buttonPlay.setVisible(true);
    }//GEN-LAST:event_buttonStopActionPerformed

    private void buttonMidiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMidiActionPerformed
        System.out.println("Save MIDI Pressed");
        saveMidiExecution();
    }//GEN-LAST:event_buttonMidiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UserInterface().setVisible(true);
        });

    }

    void setUpInterface() {
        buttonMidi.setVisible(false);
        buttonPause.setVisible(false);
        buttonStop.setVisible(false);
    }

    void saveFile() {
        String filePath = getPathUsingExplorer();
        rawText = textArea.getText();
        try (PrintStream out = new PrintStream(new FileOutputStream(filePath))) {
            out.print(rawText);
            System.out.println("Saved File");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void loadFile() {
        String filePath = getPathUsingExplorer();
        try {
            String content = readFile(filePath, StandardCharsets.UTF_8);
            textArea.setText(content);
            System.out.println("Loaded File");
        } catch (IOException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void saveMidiExecution() {
        String filePath = getPathUsingExplorer();
        try {
            MidiFileManager.savePatternToMidi(pattern, new File(filePath));
            System.out.println("Saved MIDI");
        } catch (IOException e) {
            System.out.println("Error saving MIDI file");
            System.exit(0);
        }
    }

    String getPathUsingExplorer() {
        int returnValue = jfc.showSaveDialog(null);
        File selectedFile;
        String filepath = "";
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = jfc.getSelectedFile();
            filepath = selectedFile.getAbsolutePath();
        }
        return filepath;
    }

    static String readFile(String path, Charset encoding)
            throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLoad;
    private javax.swing.JButton buttonMidi;
    private javax.swing.JButton buttonPause;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonStop;
    private javax.swing.JLabel fixedLabelStatus;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
